
## number conversions ##

.toBoolean : convert to boolean
    java.lang.String         →  Boolean.parse($EXPR$)$END$

.toByte : convert to byte
    java.lang.String         →  Byte.parse($EXPR$)$END$
    NUMBER                   →  ((byte) ($EXPR$))$END$

.toChar : convert to char
    java.lang.String         →  Character.parse($EXPR$)$END$
    NUMBER                   →  ((char) ($EXPR$))$END$

.toInt : convert to int
    java.lang.String         →  Integer.parse($EXPR$)$END$
    NUMBER                   →  ((int) ($EXPR$))$END$

.toLong : convert to long
    java.lang.String         →  Long.parse($EXPR$)$END$
    NUMBER                   →  ((long) ($EXPR$))$END$

.toFloat : convert to float
    java.lang.String         →  Float.parse($EXPR$)$END$
    NUMBER                   →  ((float) ($EXPR$))$END$

.toDouble : convert to double
    java.lang.String         →  Double.parse($EXPR$)$END$
    NUMBER                   →  ((double) ($EXPR$))$END$



## collection conversions ##

.toList : convert to List
    java.util.Collection     →  new ArrayList<>($EXPR$)$END$
    ARRAY                    →  Arrays.asList($EXPR$)$END$

.toSet : convert to Set
    java.util.Collection     →  new HashSet<>($EXPR$)$END$
    ARRAY                    →  new HashSet<>(Arrays.asList($EXPR$))$END$

.toMap : convert to Map
    java.util.Collection     →  $EXPR$.stream().collect(Collectors.toMap($END$))
    ARRAY                    →  Arrays.stream($EXPR$).collect(Collectors.toMap($END$))
    java.util.stream.Stream  →  $EXPR$.collect(Collectors.toMap($END$))



## collection operations ##

.sort : sort naturally
    ARRAY                    →  Arrays.sort($EXPR$)$END$

.sortBy :  sort by attribute
    ARRAY                    →  Arrays.sort($EXPR$, Comparator.comparing($END$))
    java.util.List           →  $EXPR$.sort(Comparator.comparing($END$))
    java.util.stream.Stream  →  $EXPR$.sorted(Comparator.comparing($END$))

.minBy : minimum by attribute
    ARRAY                    →  Arrays.stream($EXPR$).min(Comparator.comparing($END$))
    java.util.Collection     →  $EXPR$.stream().min(Comparator.comparing($END$))
    java.util.stream.Stream  →  $EXPR$.min(Comparator.comparing($END$))

.mayBy : maximu by attribute
    ARRAY                    →  Arrays.stream($EXPR$).max(Comparator.comparing($END$))
    java.util.Collection     →  $EXPR$.stream().max(Comparator.comparing($END$))
    java.util.stream.Stream  →  $EXPR$.max(Comparator.comparing($END$))

.groupBy : group by attribute
    java.util.Collection     →  $EXPR$.stream().collect(Collectors.groupingBy($END$))
    java.util.stream.Stream  →  $EXPR$.collect(Collectors.groupingBy($END$))

.exists : any match
    java.util.Collection     →  $EXPR$.stream().anyMatch($END$)
    java.util.stream.Stream  →  $EXPR$.anyMatch($END$)

.forall : all match
    java.util.Collection     →  $EXPR$.stream().allMatch($END$)
    java.util.stream.Stream  →  $EXPR$.allMatch($END$)

.reverse : reverse collection
    java.util.List           →  Collections.reverse($EXPR$)$END$

.concat : concat
    ARRAY                    →  Stream.concat(Arrays.stream($EXPR$), $END$)
    java.util.stream.Stream  →  Stream.concat($EXPR$, $END$)

.forEach : for each
    java.util.Optional       →  $EXPR$.ifPresent($END$)



## others ##

.r : compile pattern
    java.lang.String         →  Pattern.compile($EXPR$)$END$
